<?php
/**
 * ProductProductEntity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  GeminiCommerce\Product
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product Service
 *
 * Introducing our revolutionary Product Management Service! Designed to streamline your product inventory and elevate customer experiences, our cutting-edge protobuf service is a game-changer in the world of efficient product management.  With our service, you can effortlessly create new products, allowing you to quickly bring your ideas to life and expand your catalog. Retrieve product information in a snap, providing accurate and personalized details to your customers based on their specific needs and preferences.  Stay ahead of the competition by easily updating product information, ensuring your catalog is always up-to-date and optimized. Seamlessly remove products from your inventory when needed, maintaining a clean and relevant product selection.  Enhance the visual appeal of your products with our advanced media gallery functionalities. Effortlessly add and update captivating images and videos to showcase your products in the best possible light, engaging your customers and driving conversions.  Personalization is key in today's market, and our service enables you to offer unique options to your customers. Easily create and manage lists of customizable options for your products, providing flexibility and tailoring to individual preferences.  Attributes play a vital role in defining products, and our service empowers you to effectively manage them. From bulk attribute creation to listing and retrieving attribute options, our service ensures your product information is rich and comprehensive.  Our service extends its capabilities to entity management, allowing you to effortlessly handle different entities and create customized options lists associated with them. This provides further flexibility and customization options for your product offerings.  When it comes to bulk updates, our service has you covered. Effortlessly update multiple products simultaneously, saving you time and streamlining your operations.  Finding specific products and variants is a breeze with our service. Quickly locate products based on their unique stock keeping unit (SKU) values, ensuring efficient inventory management and smooth order fulfillment.  Experience a new level of efficiency and productivity with our Product Management Service. Unlock the full potential of streamlined product management and empower your business to thrive in today's competitive market. Try our service today and elevate your product management to new heights!
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GeminiCommerce\Product\Model;

use \ArrayAccess;
use \GeminiCommerce\Product\ObjectSerializer;

/**
 * ProductProductEntity Class Doc Comment
 *
 * @category Class
 * @package  GeminiCommerce\Product
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductProductEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static $withAdditionalProperties = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'productProductEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tenant_id' => 'string',
        'grn' => 'string',
        'entity_type' => 'string',
        'entity_code' => 'string',
        'id' => 'string',
        'code' => 'string',
        'variant_attributes' => 'string[]',
        'is_configurable' => 'bool',
        'is_virtual' => 'bool',
        'is_giftcard' => 'bool',
        'has_configurator' => 'bool',
        'url_key' => '\GeminiCommerce\Product\Model\ProductLocalizedText',
        'media_variant_attributes' => 'string[]',
        'attributes' => 'array<string,\GeminiCommerce\Product\Model\ProtobufAny>',
        'variants' => 'array<string,\GeminiCommerce\Product\Model\ProductProductVariant>',
        'media_gallery' => '\GeminiCommerce\Product\Model\ProductMediaGallery',
        'max_saleable_quantity' => 'int',
        'assets' => '\GeminiCommerce\Product\Model\ProductAssets',
        'in_review' => 'bool',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tenant_id' => null,
        'grn' => null,
        'entity_type' => null,
        'entity_code' => null,
        'id' => null,
        'code' => null,
        'variant_attributes' => null,
        'is_configurable' => null,
        'is_virtual' => null,
        'is_giftcard' => null,
        'has_configurator' => null,
        'url_key' => null,
        'media_variant_attributes' => null,
        'attributes' => null,
        'variants' => null,
        'media_gallery' => null,
        'max_saleable_quantity' => 'int64',
        'assets' => null,
        'in_review' => null,
        'created_at' => 'int64',
        'updated_at' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tenant_id' => false,
        'grn' => false,
        'entity_type' => false,
        'entity_code' => false,
        'id' => false,
        'code' => false,
        'variant_attributes' => false,
        'is_configurable' => false,
        'is_virtual' => false,
        'is_giftcard' => false,
        'has_configurator' => false,
        'url_key' => false,
        'media_variant_attributes' => false,
        'attributes' => false,
        'variants' => false,
        'media_gallery' => false,
        'max_saleable_quantity' => false,
        'assets' => false,
        'in_review' => false,
        'created_at' => false,
        'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tenant_id' => 'tenantId',
        'grn' => 'grn',
        'entity_type' => 'entityType',
        'entity_code' => 'entityCode',
        'id' => 'id',
        'code' => 'code',
        'variant_attributes' => 'variantAttributes',
        'is_configurable' => 'isConfigurable',
        'is_virtual' => 'isVirtual',
        'is_giftcard' => 'isGiftcard',
        'has_configurator' => 'hasConfigurator',
        'url_key' => 'urlKey',
        'media_variant_attributes' => 'mediaVariantAttributes',
        'attributes' => 'attributes',
        'variants' => 'variants',
        'media_gallery' => 'mediaGallery',
        'max_saleable_quantity' => 'maxSaleableQuantity',
        'assets' => 'assets',
        'in_review' => 'inReview',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tenant_id' => 'setTenantId',
        'grn' => 'setGrn',
        'entity_type' => 'setEntityType',
        'entity_code' => 'setEntityCode',
        'id' => 'setId',
        'code' => 'setCode',
        'variant_attributes' => 'setVariantAttributes',
        'is_configurable' => 'setIsConfigurable',
        'is_virtual' => 'setIsVirtual',
        'is_giftcard' => 'setIsGiftcard',
        'has_configurator' => 'setHasConfigurator',
        'url_key' => 'setUrlKey',
        'media_variant_attributes' => 'setMediaVariantAttributes',
        'attributes' => 'setAttributes',
        'variants' => 'setVariants',
        'media_gallery' => 'setMediaGallery',
        'max_saleable_quantity' => 'setMaxSaleableQuantity',
        'assets' => 'setAssets',
        'in_review' => 'setInReview',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tenant_id' => 'getTenantId',
        'grn' => 'getGrn',
        'entity_type' => 'getEntityType',
        'entity_code' => 'getEntityCode',
        'id' => 'getId',
        'code' => 'getCode',
        'variant_attributes' => 'getVariantAttributes',
        'is_configurable' => 'getIsConfigurable',
        'is_virtual' => 'getIsVirtual',
        'is_giftcard' => 'getIsGiftcard',
        'has_configurator' => 'getHasConfigurator',
        'url_key' => 'getUrlKey',
        'media_variant_attributes' => 'getMediaVariantAttributes',
        'attributes' => 'getAttributes',
        'variants' => 'getVariants',
        'media_gallery' => 'getMediaGallery',
        'max_saleable_quantity' => 'getMaxSaleableQuantity',
        'assets' => 'getAssets',
        'in_review' => 'getInReview',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Associative array for storing additional properties
     *
     * @var mixed[]
     */
    protected $additionalProperties = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('grn', $data ?? [], null);
        $this->setIfExists('entity_type', $data ?? [], null);
        $this->setIfExists('entity_code', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('variant_attributes', $data ?? [], null);
        $this->setIfExists('is_configurable', $data ?? [], null);
        $this->setIfExists('is_virtual', $data ?? [], null);
        $this->setIfExists('is_giftcard', $data ?? [], null);
        $this->setIfExists('has_configurator', $data ?? [], null);
        $this->setIfExists('url_key', $data ?? [], null);
        $this->setIfExists('media_variant_attributes', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('variants', $data ?? [], null);
        $this->setIfExists('media_gallery', $data ?? [], null);
        $this->setIfExists('max_saleable_quantity', $data ?? [], null);
        $this->setIfExists('assets', $data ?? [], null);
        $this->setIfExists('in_review', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets grn
     *
     * @return string|null
     */
    public function getGrn()
    {
        return $this->container['grn'];
    }

    /**
     * Sets grn
     *
     * @param string|null $grn grn
     *
     * @return self
     */
    public function setGrn($grn)
    {
        if (is_null($grn)) {
            throw new \InvalidArgumentException('non-nullable grn cannot be null');
        }
        $this->container['grn'] = $grn;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string|null $entity_type entity_type
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        if (is_null($entity_type)) {
            throw new \InvalidArgumentException('non-nullable entity_type cannot be null');
        }
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets entity_code
     *
     * @return string|null
     */
    public function getEntityCode()
    {
        return $this->container['entity_code'];
    }

    /**
     * Sets entity_code
     *
     * @param string|null $entity_code entity_code
     *
     * @return self
     */
    public function setEntityCode($entity_code)
    {
        if (is_null($entity_code)) {
            throw new \InvalidArgumentException('non-nullable entity_code cannot be null');
        }
        $this->container['entity_code'] = $entity_code;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets variant_attributes
     *
     * @return string[]|null
     */
    public function getVariantAttributes()
    {
        return $this->container['variant_attributes'];
    }

    /**
     * Sets variant_attributes
     *
     * @param string[]|null $variant_attributes variant_attributes
     *
     * @return self
     */
    public function setVariantAttributes($variant_attributes)
    {
        if (is_null($variant_attributes)) {
            throw new \InvalidArgumentException('non-nullable variant_attributes cannot be null');
        }
        $this->container['variant_attributes'] = $variant_attributes;

        return $this;
    }

    /**
     * Gets is_configurable
     *
     * @return bool|null
     */
    public function getIsConfigurable()
    {
        return $this->container['is_configurable'];
    }

    /**
     * Sets is_configurable
     *
     * @param bool|null $is_configurable is_configurable
     *
     * @return self
     */
    public function setIsConfigurable($is_configurable)
    {
        if (is_null($is_configurable)) {
            throw new \InvalidArgumentException('non-nullable is_configurable cannot be null');
        }
        $this->container['is_configurable'] = $is_configurable;

        return $this;
    }

    /**
     * Gets is_virtual
     *
     * @return bool|null
     */
    public function getIsVirtual()
    {
        return $this->container['is_virtual'];
    }

    /**
     * Sets is_virtual
     *
     * @param bool|null $is_virtual is_virtual
     *
     * @return self
     */
    public function setIsVirtual($is_virtual)
    {
        if (is_null($is_virtual)) {
            throw new \InvalidArgumentException('non-nullable is_virtual cannot be null');
        }
        $this->container['is_virtual'] = $is_virtual;

        return $this;
    }

    /**
     * Gets is_giftcard
     *
     * @return bool|null
     */
    public function getIsGiftcard()
    {
        return $this->container['is_giftcard'];
    }

    /**
     * Sets is_giftcard
     *
     * @param bool|null $is_giftcard is_giftcard
     *
     * @return self
     */
    public function setIsGiftcard($is_giftcard)
    {
        if (is_null($is_giftcard)) {
            throw new \InvalidArgumentException('non-nullable is_giftcard cannot be null');
        }
        $this->container['is_giftcard'] = $is_giftcard;

        return $this;
    }

    /**
     * Gets has_configurator
     *
     * @return bool|null
     */
    public function getHasConfigurator()
    {
        return $this->container['has_configurator'];
    }

    /**
     * Sets has_configurator
     *
     * @param bool|null $has_configurator has_configurator
     *
     * @return self
     */
    public function setHasConfigurator($has_configurator)
    {
        if (is_null($has_configurator)) {
            throw new \InvalidArgumentException('non-nullable has_configurator cannot be null');
        }
        $this->container['has_configurator'] = $has_configurator;

        return $this;
    }

    /**
     * Gets url_key
     *
     * @return \GeminiCommerce\Product\Model\ProductLocalizedText|null
     */
    public function getUrlKey()
    {
        return $this->container['url_key'];
    }

    /**
     * Sets url_key
     *
     * @param \GeminiCommerce\Product\Model\ProductLocalizedText|null $url_key url_key
     *
     * @return self
     */
    public function setUrlKey($url_key)
    {
        if (is_null($url_key)) {
            throw new \InvalidArgumentException('non-nullable url_key cannot be null');
        }
        $this->container['url_key'] = $url_key;

        return $this;
    }

    /**
     * Gets media_variant_attributes
     *
     * @return string[]|null
     */
    public function getMediaVariantAttributes()
    {
        return $this->container['media_variant_attributes'];
    }

    /**
     * Sets media_variant_attributes
     *
     * @param string[]|null $media_variant_attributes media_variant_attributes
     *
     * @return self
     */
    public function setMediaVariantAttributes($media_variant_attributes)
    {
        if (is_null($media_variant_attributes)) {
            throw new \InvalidArgumentException('non-nullable media_variant_attributes cannot be null');
        }
        $this->container['media_variant_attributes'] = $media_variant_attributes;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,\GeminiCommerce\Product\Model\ProtobufAny>|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,\GeminiCommerce\Product\Model\ProtobufAny>|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets variants
     *
     * @return array<string,\GeminiCommerce\Product\Model\ProductProductVariant>|null
     */
    public function getVariants()
    {
        return $this->container['variants'];
    }

    /**
     * Sets variants
     *
     * @param array<string,\GeminiCommerce\Product\Model\ProductProductVariant>|null $variants variants
     *
     * @return self
     */
    public function setVariants($variants)
    {
        if (is_null($variants)) {
            throw new \InvalidArgumentException('non-nullable variants cannot be null');
        }
        $this->container['variants'] = $variants;

        return $this;
    }

    /**
     * Gets media_gallery
     *
     * @return \GeminiCommerce\Product\Model\ProductMediaGallery|null
     */
    public function getMediaGallery()
    {
        return $this->container['media_gallery'];
    }

    /**
     * Sets media_gallery
     *
     * @param \GeminiCommerce\Product\Model\ProductMediaGallery|null $media_gallery media_gallery
     *
     * @return self
     */
    public function setMediaGallery($media_gallery)
    {
        if (is_null($media_gallery)) {
            throw new \InvalidArgumentException('non-nullable media_gallery cannot be null');
        }
        $this->container['media_gallery'] = $media_gallery;

        return $this;
    }

    /**
     * Gets max_saleable_quantity
     *
     * @return int|null
     */
    public function getMaxSaleableQuantity()
    {
        return $this->container['max_saleable_quantity'];
    }

    /**
     * Sets max_saleable_quantity
     *
     * @param int|null $max_saleable_quantity max_saleable_quantity
     *
     * @return self
     */
    public function setMaxSaleableQuantity($max_saleable_quantity)
    {
        if (is_null($max_saleable_quantity)) {
            throw new \InvalidArgumentException('non-nullable max_saleable_quantity cannot be null');
        }
        $this->container['max_saleable_quantity'] = $max_saleable_quantity;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return \GeminiCommerce\Product\Model\ProductAssets|null
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param \GeminiCommerce\Product\Model\ProductAssets|null $assets assets
     *
     * @return self
     */
    public function setAssets($assets)
    {
        if (is_null($assets)) {
            throw new \InvalidArgumentException('non-nullable assets cannot be null');
        }
        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets in_review
     *
     * @return bool|null
     */
    public function getInReview()
    {
        return $this->container['in_review'];
    }

    /**
     * Sets in_review
     *
     * @param bool|null $in_review in_review
     *
     * @return self
     */
    public function setInReview($in_review)
    {
        if (is_null($in_review)) {
            throw new \InvalidArgumentException('non-nullable in_review cannot be null');
        }
        $this->container['in_review'] = $in_review;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    public static function withAdditionalProperties(): bool
    {
        return self::$withAdditionalProperties;
    }


    public function setAdditionalProperty($name, $value)
    {
        throw new \InvalidArgumentException(
            sprintf(
                "This model cannot have additional properties"
            )
        );
    }

    public function getAdditionalProperty($name)
    {
        return $this->additionalProperties[$name];
    }

    public function hasAdditionalProperty($name): bool
    {
        return array_key_exists($name, $this->additionalProperties);
    }

    public function getAdditionalProperties()
    {
        return $this->additionalProperties;
    }
}


